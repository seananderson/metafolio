// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// est_beta_params
NumericVector est_beta_params(double mu, double var);
RcppExport SEXP metafolio_est_beta_params(SEXP muSEXP, SEXP varSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< double >::type mu(muSEXP );
        Rcpp::traits::input_parameter< double >::type var(varSEXP );
        NumericVector __result = est_beta_params(mu, var);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// impl_error
NumericVector impl_error(NumericVector mu, double sigma_impl);
RcppExport SEXP metafolio_impl_error(SEXP muSEXP, SEXP sigma_implSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type mu(muSEXP );
        Rcpp::traits::input_parameter< double >::type sigma_impl(sigma_implSEXP );
        NumericVector __result = impl_error(mu, sigma_impl);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// ricker_v_t
double ricker_v_t(double spawners, double a, double b, double d, double v_t);
RcppExport SEXP metafolio_ricker_v_t(SEXP spawnersSEXP, SEXP aSEXP, SEXP bSEXP, SEXP dSEXP, SEXP v_tSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< double >::type spawners(spawnersSEXP );
        Rcpp::traits::input_parameter< double >::type a(aSEXP );
        Rcpp::traits::input_parameter< double >::type b(bSEXP );
        Rcpp::traits::input_parameter< double >::type d(dSEXP );
        Rcpp::traits::input_parameter< double >::type v_t(v_tSEXP );
        double __result = ricker_v_t(spawners, a, b, d, v_t);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// is_element
bool is_element(int x, NumericVector y);
RcppExport SEXP metafolio_is_element(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< int >::type x(xSEXP );
        Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP );
        bool __result = is_element(x, y);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// fastlm
arma::colvec fastlm(NumericVector yr, NumericMatrix Xr);
RcppExport SEXP metafolio_fastlm(SEXP yrSEXP, SEXP XrSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type yr(yrSEXP );
        Rcpp::traits::input_parameter< NumericMatrix >::type Xr(XrSEXP );
        arma::colvec __result = fastlm(yr, Xr);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// fit_ricker
NumericVector fit_ricker(NumericVector S, NumericVector R);
RcppExport SEXP metafolio_fit_ricker(SEXP SSEXP, SEXP RSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type S(SSEXP );
        Rcpp::traits::input_parameter< NumericVector >::type R(RSEXP );
        NumericVector __result = fit_ricker(S, R);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// ricker_escapement
double ricker_escapement(double a, double b);
RcppExport SEXP metafolio_ricker_escapement(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< double >::type a(aSEXP );
        Rcpp::traits::input_parameter< double >::type b(bSEXP );
        double __result = ricker_escapement(a, b);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// metasim_base
List metasim_base(int n_pop, int n_t, NumericVector spawners_0, NumericVector b, NumericMatrix epsilon_mat, NumericMatrix A_params, bool add_straying, NumericMatrix stray_mat, NumericVector assess_years, NumericMatrix r_escp_goals, double sigma_impl, bool add_impl_error);
RcppExport SEXP metafolio_metasim_base(SEXP n_popSEXP, SEXP n_tSEXP, SEXP spawners_0SEXP, SEXP bSEXP, SEXP epsilon_matSEXP, SEXP A_paramsSEXP, SEXP add_strayingSEXP, SEXP stray_matSEXP, SEXP assess_yearsSEXP, SEXP r_escp_goalsSEXP, SEXP sigma_implSEXP, SEXP add_impl_errorSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< int >::type n_pop(n_popSEXP );
        Rcpp::traits::input_parameter< int >::type n_t(n_tSEXP );
        Rcpp::traits::input_parameter< NumericVector >::type spawners_0(spawners_0SEXP );
        Rcpp::traits::input_parameter< NumericVector >::type b(bSEXP );
        Rcpp::traits::input_parameter< NumericMatrix >::type epsilon_mat(epsilon_matSEXP );
        Rcpp::traits::input_parameter< NumericMatrix >::type A_params(A_paramsSEXP );
        Rcpp::traits::input_parameter< bool >::type add_straying(add_strayingSEXP );
        Rcpp::traits::input_parameter< NumericMatrix >::type stray_mat(stray_matSEXP );
        Rcpp::traits::input_parameter< NumericVector >::type assess_years(assess_yearsSEXP );
        Rcpp::traits::input_parameter< NumericMatrix >::type r_escp_goals(r_escp_goalsSEXP );
        Rcpp::traits::input_parameter< double >::type sigma_impl(sigma_implSEXP );
        Rcpp::traits::input_parameter< bool >::type add_impl_error(add_impl_errorSEXP );
        List __result = metasim_base(n_pop, n_t, spawners_0, b, epsilon_mat, A_params, add_straying, stray_mat, assess_years, r_escp_goals, sigma_impl, add_impl_error);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
